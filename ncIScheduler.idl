/***************************************************************************************************
ncIScheduler.idl:
	Copyright (c) Eisoo Software, Inc.(2013), All rights reserved.

Purpose:
	客户端调度接口文件。

Author:
	yi.zhihui@eisoo.com

Created Time:
	2013-5-14
***************************************************************************************************/

#include "nsISupports.idl"

interface ncIEACPClient;
interface ncIEFSPClient;
interface ncIDataMgr;
interface ncIDocMgr;
interface ncICleanCacheMgr;

native int(int);
//native bool(bool);
[ref] native intRef (int);
[ref] native ncSyncSummaryRef (ncSyncSummary);
[ref] native ncSyncDetailMapRef (map<int, ncProgressInfo>);
[ref] native ncWaitTaskMapRef (map<int, ncWaitTaskInfo>);

%{ C++

#define NC_SCHEDULER_CID										\
	{															\
		0x1bdd36a3,												\
		0x1f81,													\
		0x4d97,													\
		{ 0xb2, 0xba, 0x78, 0x53, 0x9c, 0xc3, 0xe, 0xe8 }		\
	}

#define NC_SCHEDULER_CONTRACTID									\
	"@eisoo.com/anyshare/client/scheduler;1"

#include <docmgr/public/ncIDocOperation.h>
#include <docmgr/public/ncITaskMgr.h>

#include "ncutil/ncutil.h"

// 提示类型
enum ncPromptType
{
	PROMPT_UNDEFINED = 0, 
	PROMPT_PERM_CREATE_L = 1,
	PROMPT_PERM_EDIT_L = 2,
	PROMPT_PERM_DELETE_DIR = 3,
	PROMPT_PERM_DELETE_FILE = 4,
	PROMPT_PERM_RENAME_DIR = 5,
	PROMPT_PERM_RENAME_FILE = 6,
	PROMPT_PERM_RENAME_L = 7,
	PROMPT_LOCK_EDIT_L = 8,
	PROMPT_LOCK_DELETE_FILE = 9,
	PROMPT_LOCK_RENAME_FILE = 10,
	PROMPT_LOCK_RENAME_L = 11,
	PROMPT_QUOTA_NOT_ENOUGH = 12,
	PROMPT_ACCESS_DENIED = 13, 
	PROMPT_DOC_OCCUPIED = 14,
	PROMPT_LACK_SPACE = 15,
	PROMPT_NETWORK = 16,
	PROMPT_SERVER_BUSY = 17,
	PROMPT_DNUPTIAL_CONFLICT = 18,
	PROMPT_DNUPTIAL_FILE_NETYPE = 19,
	PROMPT_DNUPTIAL_FILE_NPERM = 20,
	PROMPT_DNUPTIAL_FILE_PERM = 21,
	PROMPT_DNUPTIAL_FOLDER_NETYPE = 22,
	PROMPT_DNUPTIAL_FOLDER_NPERM = 23,
	PROMPT_DNUPTIAL_FOLDER_PERM = 24,
	PROMPT_DNUPTIAL_RENAME_FILE = 25,
	PROMPT_DNUPTIAL_RENAME_FOLDER = 26,
	PROMPT_CLOUD_COPY_MOVE = 27,
	PROMPT_CLOUD_COPY_MOVE_NPERM = 28,
	PROMPT_PERM_ONLY_SHOW = 29,
};

// 重名冲突事件
struct NameConflitParam 
{
	ncPromptType  type;
	uint          conflitOption;
	bool          bJumpAll;
    ncIWaitEvent* pWaitEvent;
	String        relPath;
	String        newName;
	String        suggestName;
	bool		  bIsCopyOp;
	NameConflitParam():type(PROMPT_DNUPTIAL_CONFLICT)
		,conflitOption(0)
		,bJumpAll(false)
		,pWaitEvent(NULL)
		,bIsCopyOp(true)
	{

	}
};

//
struct ShareMsgWndParam
{
	bool           bCheckVisible;
	ncIWaitEvent  *pWaitEvent;
	String         strSubTitleSText;
	String         strLocationBtn;
	String         strContentSText; 
	ShareMsgWndParam():bCheckVisible(false)
		,pWaitEvent(NULL)
		,strSubTitleSText(String::EMPTY)
		,strLocationBtn(String::EMPTY)
		,strContentSText(String::EMPTY)
	{
	}
};

// 客户端同步状态
enum ncSyncState
{
	STATE_UNDEFINED,				// 未定义
	STATE_DETECT,					// 探测服务端文档变化
	STATE_SYNCING,					// 正在同步
	STATE_PAUSE,					// 暂停同步
	STATE_COMPLETED,				// 完成同步
};

// 同步概要信息
struct ncSyncSummary
{
	ncSyncState		_state;			// 当前同步状态
	int				_num;			// 待同步任务数
	int64			_rate;			// 平均速度（单位：bytes/s）
	int64			_leftTime;		// 剩余完成时间（单位：s）

	ncSyncSummary ()
		: _state (STATE_COMPLETED)
		, _num (0)
		, _rate (0)
		, _leftTime (0)
	{
	}
};

%}

/**
 * 客户端调度接口。
 */
[uuid(CF8337A8-6D26-478a-8C00-AB9DF6505003)]
interface ncIScheduler : nsISupports
{
	/**
	 * 开启调度。
	 * @param eacpClient:			EACP协议客户端对象。
	 * @param efspClient:			EFSP协议客户端对象。
	 * @param dataMgr:				数据管理对象。
	 * @param docMgr:				文档管理对象。
	 */
	[notxpcom] void Start (in ncIEACPClient eacpClient,
						in ncIEFSPClient efspClient,
						in ncIDataMgr dataMgr,
						in ncIDocMgr docMgr);

	/**
	 * 暂停调度。
	 */
	[notxpcom] void Pause ();

	/**
	 * 恢复调度。
	 */
	[notxpcom] void Resume ();

	/**
	 * 停止调度。
	 */
	[notxpcom] void Stop ();

	/**
	 * 获取同步进度概要: 包括同步状态，待同步数等。
	 * @param summary:				同步进度概要信息。
	 */
	[notxpcom] void GetSyncSummary (in ncSyncSummaryRef summary);

	/**
	 * 获取同步进度详情：包括正在同步和待同步的任务详细信息。
	 * @param syncTaskMap:			正在同步的任务信息。
	 * @param waitTaskMap:			指定区间内的待同步任务信息。
	 * @param begin:				本次待同步任务的区间起点。
	 * @param end:					本次待同步任务的区间终点。
	 * @param total:				当前总的同步任务数。
	 */
	[notxpcom] void GetSyncDetail (in ncSyncDetailMapRef syncTaskMap,
						in ncWaitTaskMapRef waitTaskMap,
						in int begin,
						in int end,
						in intRef total);

	/**
	 * 获取正在同步进度详情：包括正在同步任务详细信息。
	 * @param syncTaskMap:			正在同步的任务信息。
	 */
	[notxpcom] void GetSyncingDetail (in ncSyncDetailMapRef syncTaskMap);

	/**
	 * 创建清理缓存对象。
	 */
	[notxpcom] ncICleanCacheMgr CreateCleanCacheMgr ();

}; // End interface ncIScheduler
