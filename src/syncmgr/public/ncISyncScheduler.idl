/***************************************************************************************************
Purpose:
	同步调度接口文件。

Author:
	Chaos

Created Time:
	2016-8-18
***************************************************************************************************/

#include "nsISupports.idl"

native bool (bool);
native uint (uint);
[ref] native uintRef (uint);
[ref] native boolRef (bool);
[ref] native StringRef (String);
[ref] native ncTaskSummaryRef (ncTaskSummary);
[ref] native ncTaskDetailVecRef (ncTaskDetailVec);

%{ C++

// 任务类型定义
enum ncTaskType
{
	NC_TT_UNKNOWN = 0,						// 未定义
	NC_TT_DOWN_CREATE_DIR = 1,				// 向本地创建目录
	NC_TT_DOWN_EDIT_FILE = 2,				// 向本地下载文件
	NC_TT_DOWN_DELETE_DIR = 3,				// 向本地删除目录
	NC_TT_DOWN_DELETE_FILE = 4,				// 向本地删除文件
	NC_TT_DOWN_RENAME_DIR = 5,				// 向本地重命名目录
	NC_TT_DOWN_RENAME_FILE = 6,				// 向本地重命名文件
	NC_TT_DOWN_UPDATE_OTAG = 7,				// 向本地修改变化标识
	NC_TT_DOWN_UPDATE_ATTR = 8,				// 向本地修改属性
	NC_TT_DOWN_UPDATE_TYPENAME = 9,			// 向本地修改类型名称
	NC_TT_DOWN_UPDATE_DELAY = 10,			// 向本地修改延迟下载标记
	NC_TT_UP_CREATE_DIR = 11,				// 向云端创建目录
	NC_TT_UP_EDIT_FILE = 12,				// 向云端上传文件
	NC_TT_UP_EDIT_DUP_FILE = 13,			// 向云端秒传文件
	NC_TT_UP_DELETE_DIR = 14,				// 向云端删除目录
	NC_TT_UP_DELETE_FILE = 15,				// 向云端删除文件
	NC_TT_UP_RENAME_DIR = 16,				// 向云端重命名目录
	NC_TT_UP_RENAME_FILE = 17,				// 向云端重命名文件
	NC_TT_LOCAL_CLEAN_DIR = 18,				// 向本地清除目录
	NC_TT_LOCAL_CLEAN_FILE = 19,			// 向本地清除文件
	NC_TT_CLOUD_COPY_DIR = 20,				// 向云端复制目录
	NC_TT_CLOUD_COPY_FILE = 21,				// 向云端复制文件
	NC_TT_CLOUD_MOVE_DIR = 22,				// 向云端移动目录
	NC_TT_CLOUD_MOVE_FILE = 23,				// 向云端移动文件
	NC_TT_DIRECT_DOWNLOAD_DIR = 24,			// 向盘外直接下载目录
	NC_TT_DIRECT_DOWNLOAD_FILE = 25,		// 向盘外直接下载文件
	NC_TT_DIRECT_UPLOAD_DIR = 26,			// 向云端直接上传目录
	NC_TT_DIRECT_UPLOAD_FILE = 27,			// 向云端直接上传文件
	NC_TT_RESTORED_VERSION = 28,			// 向云端还原历史版本
	NC_TT_COMPLETE_UPLOAD_DIR = 29,			// 向云端上传目录
	NC_TT_PREVIEW_FILE = 30,				// 向本地预览文件
	NC_TT_DOWN_UPDATE_MODIFYTIME_DIR = 31,	// 向本地更新文件修改时间
	NC_TT_DOWN_DELAY_FILE = 32,				// 向本地下载延迟文件对象
	NC_TT_AUTO_DOWN_FILE = 33,				// 向本地下载文件（自动下载，探测）
};

// 检查是否为可见任务
inline bool IsVisibleTask (ncTaskType type)
{
	return (type == NC_TT_DOWN_EDIT_FILE ||
		type == NC_TT_UP_EDIT_FILE ||
		type == NC_TT_DIRECT_UPLOAD_FILE ||
		type == NC_TT_DIRECT_DOWNLOAD_FILE ||
		type == NC_TT_DIRECT_UPLOAD_DIR ||
		type == NC_TT_DIRECT_DOWNLOAD_DIR);
}

// 需要关联检查、过滤重复的不可见任务
inline bool IsNoOverlapTask (ncTaskType type)
{
	return (type != NC_TT_DOWN_UPDATE_OTAG &&
			type != NC_TT_DOWN_UPDATE_ATTR &&
			type != NC_TT_DOWN_UPDATE_TYPENAME &&
			type != NC_TT_DOWN_UPDATE_DELAY &&
			type != NC_TT_RESTORED_VERSION &&
			type != NC_TT_DOWN_UPDATE_MODIFYTIME_DIR);
}

// 检查是否为重命名任务
inline bool IsRenameTask (ncTaskType type)
{
	return (type == NC_TT_DOWN_RENAME_DIR ||
			type == NC_TT_DOWN_RENAME_FILE ||
			type == NC_TT_UP_RENAME_DIR ||
			type == NC_TT_UP_RENAME_FILE);
}

// 检查是否为上行任务
inline bool IsUpwardTask (ncTaskType type)
{
	return (type == NC_TT_UP_CREATE_DIR ||
			type == NC_TT_UP_DELETE_DIR ||
			type == NC_TT_UP_RENAME_DIR ||
			type == NC_TT_UP_EDIT_FILE ||
			type == NC_TT_UP_EDIT_DUP_FILE ||
			type == NC_TT_UP_DELETE_FILE ||
			type == NC_TT_UP_RENAME_FILE ||
			type == NC_TT_CLOUD_COPY_DIR ||
			type == NC_TT_CLOUD_MOVE_DIR ||
			type == NC_TT_CLOUD_COPY_FILE ||
			type == NC_TT_CLOUD_MOVE_FILE ||
			type == NC_TT_DIRECT_UPLOAD_DIR ||
			type == NC_TT_DIRECT_UPLOAD_FILE ||
			type == NC_TT_COMPLETE_UPLOAD_DIR);
}

// 任务状态定义
enum ncTaskStatus
{
	NC_TS_UNKNOWN		= 0x00000000,	// 未定义
	NC_TS_WAITING		= 0x00000001,	// 等待执行
	NC_TS_PAUSED		= 0x00000002,	// 暂停执行
	NC_TS_EXECUTING		= 0x00000004,	// 正在执行
	NC_TS_CANCELD		=	0x00000008, // 取消
	NC_TS_DONE			= 0x00000010,	// 完成
};

// 任务概要定义（仅包含可见任务）
struct ncTaskSummary
{
	uint				_num;			// 总任务数

	ncTaskSummary ()
		: _num (0)
	{}
};

// 任务详情定义（仅包含可见任务）
struct ncTaskDetail
{
	ncTaskType			_type;			// 任务类型
	ncTaskStatus		_status;		// 任务状态
	String				_relPath;		// 相对路径
	int64				_size;			// 文档大小（目录为-1）
	double				_rate;			// 传输速度（字节/秒）
	double				_ratios;		// 完成百分比

	ncTaskDetail ()
		: _type (NC_TT_UNKNOWN)
		, _status (NC_TS_UNKNOWN)
		, _size (0)
		, _rate (0)
		, _ratios (0)
	{}
};

typedef vector<pair<uint, ncTaskDetail> > ncTaskDetailVec;

%}

[uuid(5035C3FA-4668-4f19-8892-4A110C1E084A)]
interface ncISyncScheduler : nsISupports
{
	/**
	 * 获取任务概要信息
	 *
	 * @param summary:				任务概要信息
	 */
	[notxpcom] void GetSummary (in ncTaskSummaryRef summary);

	/**
	 * 获取任务详细信息
	 *
	 * @param detailVec:			任务详细信息
	 * @param begin:				任务区间起点
	 * @param end:					任务区间终点
	 * @param total:				总任务数
	 * @param bAllPaused:			全部已暂停标识
	 */
	[notxpcom] void GetDetail (in ncTaskDetailVecRef detailVec,
							   in uint begin,
							   in uint end,
							   in uintRef total,
							   in boolRef bAllPaused);

	/**
	 * 暂停指定任务
	 *
	 * @param taskId:				任务ID
	 */
	[notxpcom] void PauseTask (in uint taskId);

	/**
	 * 恢复指定任务
	 *
	 * @param taskId:				任务ID
	 */
	[notxpcom] void ResumeTask (in uint taskId);

	/**
	 * 取消指定任务
	 *
	 * @param taskId:				任务ID
	 */
	[notxpcom] void CancelTask (in uint taskId);

	/**
	 * 暂停所有任务
	 *
	 */
	[notxpcom] void PauseAll ();

	/**
	 * 恢复指定任务
	 *
	 */
	[notxpcom] void ResumeAll ();

	/**
	 * 取消所有任务
	 *
	 */
	[notxpcom] void CancelAll ();

	/**
	 * 等待指定任务执行完成
	 *
	 * @param taskId:				任务ID
	 */
	[notxpcom] void WaitTaskDone (in uint taskId);

	/**
	 * 检查是否存在指定ID任务
	 *
	 * @param taskId:				任务ID
	 */
	[notxpcom] bool HasIDTask (in uint taskId);

	/**
	 * 检查是否存在指定路径任务
	 *
	 * @param relPath:				文档路径（相对路径）
	 * @param checkChild:			是否检查子孙文档的任务
	 */
	[notxpcom] bool HasPathTask ([const] in StringRef relPath, in bool checkChild);

	/**
	 * 检查是否存在任何任务
	 */
	[notxpcom] bool HasAnyTask ();

	/**
	 * 检查是否存在上行任务
	 */
	[notxpcom] bool HasUpwardTask ();

}; // End interface ncISyncScheduler
